/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.automatski.autosim.ureactive.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UReactiveService {

  public interface Iface {

    public void ping() throws UReactiveServiceException, org.apache.thrift.TException;

    public void tellTuple(String accessKey, String secretKey, Tuple tuple) throws org.apache.thrift.TException;

    public void tellTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection) throws org.apache.thrift.TException;

    public TupleCollection askTuple(String accessKey, String secretKey, Tuple tuple) throws UReactiveServiceException, org.apache.thrift.TException;

    public TupleCollection askTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection) throws UReactiveServiceException, org.apache.thrift.TException;

    public TupleCollection poll(String accessKey, String secretKey) throws UReactiveServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

    public void tellTuple(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tellTuple_call> resultHandler) throws org.apache.thrift.TException;

    public void tellTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tellTupleCollection_call> resultHandler) throws org.apache.thrift.TException;

    public void askTuple(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.askTuple_call> resultHandler) throws org.apache.thrift.TException;

    public void askTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.askTupleCollection_call> resultHandler) throws org.apache.thrift.TException;

    public void poll(String accessKey, String secretKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.poll_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws UReactiveServiceException, org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws UReactiveServiceException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void tellTuple(String accessKey, String secretKey, Tuple tuple) throws org.apache.thrift.TException
    {
      send_tellTuple(accessKey, secretKey, tuple);
    }

    public void send_tellTuple(String accessKey, String secretKey, Tuple tuple) throws org.apache.thrift.TException
    {
      tellTuple_args args = new tellTuple_args();
      args.setAccessKey(accessKey);
      args.setSecretKey(secretKey);
      args.setTuple(tuple);
      sendBase("tellTuple", args);
    }

    public void tellTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection) throws org.apache.thrift.TException
    {
      send_tellTupleCollection(accessKey, secretKey, tupleCollection);
    }

    public void send_tellTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection) throws org.apache.thrift.TException
    {
      tellTupleCollection_args args = new tellTupleCollection_args();
      args.setAccessKey(accessKey);
      args.setSecretKey(secretKey);
      args.setTupleCollection(tupleCollection);
      sendBase("tellTupleCollection", args);
    }

    public TupleCollection askTuple(String accessKey, String secretKey, Tuple tuple) throws UReactiveServiceException, org.apache.thrift.TException
    {
      send_askTuple(accessKey, secretKey, tuple);
      return recv_askTuple();
    }

    public void send_askTuple(String accessKey, String secretKey, Tuple tuple) throws org.apache.thrift.TException
    {
      askTuple_args args = new askTuple_args();
      args.setAccessKey(accessKey);
      args.setSecretKey(secretKey);
      args.setTuple(tuple);
      sendBase("askTuple", args);
    }

    public TupleCollection recv_askTuple() throws UReactiveServiceException, org.apache.thrift.TException
    {
      askTuple_result result = new askTuple_result();
      receiveBase(result, "askTuple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "askTuple failed: unknown result");
    }

    public TupleCollection askTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection) throws UReactiveServiceException, org.apache.thrift.TException
    {
      send_askTupleCollection(accessKey, secretKey, tupleCollection);
      return recv_askTupleCollection();
    }

    public void send_askTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection) throws org.apache.thrift.TException
    {
      askTupleCollection_args args = new askTupleCollection_args();
      args.setAccessKey(accessKey);
      args.setSecretKey(secretKey);
      args.setTupleCollection(tupleCollection);
      sendBase("askTupleCollection", args);
    }

    public TupleCollection recv_askTupleCollection() throws UReactiveServiceException, org.apache.thrift.TException
    {
      askTupleCollection_result result = new askTupleCollection_result();
      receiveBase(result, "askTupleCollection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "askTupleCollection failed: unknown result");
    }

    public TupleCollection poll(String accessKey, String secretKey) throws UReactiveServiceException, org.apache.thrift.TException
    {
      send_poll(accessKey, secretKey);
      return recv_poll();
    }

    public void send_poll(String accessKey, String secretKey) throws org.apache.thrift.TException
    {
      poll_args args = new poll_args();
      args.setAccessKey(accessKey);
      args.setSecretKey(secretKey);
      sendBase("poll", args);
    }

    public TupleCollection recv_poll() throws UReactiveServiceException, org.apache.thrift.TException
    {
      poll_result result = new poll_result();
      receiveBase(result, "poll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "poll failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UReactiveServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void tellTuple(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<tellTuple_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tellTuple_call method_call = new tellTuple_call(accessKey, secretKey, tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tellTuple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String secretKey;
      private Tuple tuple;
      public tellTuple_call(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<tellTuple_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tellTuple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tellTuple_args args = new tellTuple_args();
        args.setAccessKey(accessKey);
        args.setSecretKey(secretKey);
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void tellTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection, org.apache.thrift.async.AsyncMethodCallback<tellTupleCollection_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tellTupleCollection_call method_call = new tellTupleCollection_call(accessKey, secretKey, tupleCollection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tellTupleCollection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String secretKey;
      private TupleCollection tupleCollection;
      public tellTupleCollection_call(String accessKey, String secretKey, TupleCollection tupleCollection, org.apache.thrift.async.AsyncMethodCallback<tellTupleCollection_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.tupleCollection = tupleCollection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tellTupleCollection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tellTupleCollection_args args = new tellTupleCollection_args();
        args.setAccessKey(accessKey);
        args.setSecretKey(secretKey);
        args.setTupleCollection(tupleCollection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void askTuple(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<askTuple_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      askTuple_call method_call = new askTuple_call(accessKey, secretKey, tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class askTuple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String secretKey;
      private Tuple tuple;
      public askTuple_call(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<askTuple_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("askTuple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        askTuple_args args = new askTuple_args();
        args.setAccessKey(accessKey);
        args.setSecretKey(secretKey);
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TupleCollection getResult() throws UReactiveServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_askTuple();
      }
    }

    public void askTupleCollection(String accessKey, String secretKey, TupleCollection tupleCollection, org.apache.thrift.async.AsyncMethodCallback<askTupleCollection_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      askTupleCollection_call method_call = new askTupleCollection_call(accessKey, secretKey, tupleCollection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class askTupleCollection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String secretKey;
      private TupleCollection tupleCollection;
      public askTupleCollection_call(String accessKey, String secretKey, TupleCollection tupleCollection, org.apache.thrift.async.AsyncMethodCallback<askTupleCollection_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.tupleCollection = tupleCollection;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("askTupleCollection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        askTupleCollection_args args = new askTupleCollection_args();
        args.setAccessKey(accessKey);
        args.setSecretKey(secretKey);
        args.setTupleCollection(tupleCollection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TupleCollection getResult() throws UReactiveServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_askTupleCollection();
      }
    }

    public void poll(String accessKey, String secretKey, org.apache.thrift.async.AsyncMethodCallback<poll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      poll_call method_call = new poll_call(accessKey, secretKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class poll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String secretKey;
      public poll_call(String accessKey, String secretKey, org.apache.thrift.async.AsyncMethodCallback<poll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessKey = accessKey;
        this.secretKey = secretKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("poll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        poll_args args = new poll_args();
        args.setAccessKey(accessKey);
        args.setSecretKey(secretKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TupleCollection getResult() throws UReactiveServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_poll();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("tellTuple", new tellTuple());
      processMap.put("tellTupleCollection", new tellTupleCollection());
      processMap.put("askTuple", new askTuple());
      processMap.put("askTupleCollection", new askTupleCollection());
      processMap.put("poll", new poll());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          iface.ping();
        } catch (UReactiveServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class tellTuple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tellTuple_args> {
      public tellTuple() {
        super("tellTuple");
      }

      public tellTuple_args getEmptyArgsInstance() {
        return new tellTuple_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, tellTuple_args args) throws org.apache.thrift.TException {
        iface.tellTuple(args.accessKey, args.secretKey, args.tuple);
        return null;
      }
    }

    public static class tellTupleCollection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tellTupleCollection_args> {
      public tellTupleCollection() {
        super("tellTupleCollection");
      }

      public tellTupleCollection_args getEmptyArgsInstance() {
        return new tellTupleCollection_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, tellTupleCollection_args args) throws org.apache.thrift.TException {
        iface.tellTupleCollection(args.accessKey, args.secretKey, args.tupleCollection);
        return null;
      }
    }

    public static class askTuple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, askTuple_args> {
      public askTuple() {
        super("askTuple");
      }

      public askTuple_args getEmptyArgsInstance() {
        return new askTuple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public askTuple_result getResult(I iface, askTuple_args args) throws org.apache.thrift.TException {
        askTuple_result result = new askTuple_result();
        try {
          result.success = iface.askTuple(args.accessKey, args.secretKey, args.tuple);
        } catch (UReactiveServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class askTupleCollection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, askTupleCollection_args> {
      public askTupleCollection() {
        super("askTupleCollection");
      }

      public askTupleCollection_args getEmptyArgsInstance() {
        return new askTupleCollection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public askTupleCollection_result getResult(I iface, askTupleCollection_args args) throws org.apache.thrift.TException {
        askTupleCollection_result result = new askTupleCollection_result();
        try {
          result.success = iface.askTupleCollection(args.accessKey, args.secretKey, args.tupleCollection);
        } catch (UReactiveServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class poll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, poll_args> {
      public poll() {
        super("poll");
      }

      public poll_args getEmptyArgsInstance() {
        return new poll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public poll_result getResult(I iface, poll_args args) throws org.apache.thrift.TException {
        poll_result result = new poll_result();
        try {
          result.success = iface.poll(args.accessKey, args.secretKey);
        } catch (UReactiveServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public UReactiveServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      UReactiveServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetE()) {
        this.e = new UReactiveServiceException(other.e);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public UReactiveServiceException getE() {
      return this.e;
    }

    public ping_result setE(UReactiveServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UReactiveServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UReactiveServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new UReactiveServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class tellTuple_args implements org.apache.thrift.TBase<tellTuple_args, tellTuple_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tellTuple_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tellTuple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tellTuple_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String secretKey; // required
    public Tuple tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      SECRET_KEY((short)2, "secretKey"),
      TUPLE((short)3, "tuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // SECRET_KEY
            return SECRET_KEY;
          case 3: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tellTuple_args.class, metaDataMap);
    }

    public tellTuple_args() {
    }

    public tellTuple_args(
      String accessKey,
      String secretKey,
      Tuple tuple)
    {
      this();
      this.accessKey = accessKey;
      this.secretKey = secretKey;
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tellTuple_args(tellTuple_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetSecretKey()) {
        this.secretKey = other.secretKey;
      }
      if (other.isSetTuple()) {
        this.tuple = new Tuple(other.tuple);
      }
    }

    public tellTuple_args deepCopy() {
      return new tellTuple_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.secretKey = null;
      this.tuple = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public tellTuple_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getSecretKey() {
      return this.secretKey;
    }

    public tellTuple_args setSecretKey(String secretKey) {
      this.secretKey = secretKey;
      return this;
    }

    public void unsetSecretKey() {
      this.secretKey = null;
    }

    /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretKey() {
      return this.secretKey != null;
    }

    public void setSecretKeyIsSet(boolean value) {
      if (!value) {
        this.secretKey = null;
      }
    }

    public Tuple getTuple() {
      return this.tuple;
    }

    public tellTuple_args setTuple(Tuple tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case SECRET_KEY:
        if (value == null) {
          unsetSecretKey();
        } else {
          setSecretKey((String)value);
        }
        break;

      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((Tuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case SECRET_KEY:
        return getSecretKey();

      case TUPLE:
        return getTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case SECRET_KEY:
        return isSetSecretKey();
      case TUPLE:
        return isSetTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tellTuple_args)
        return this.equals((tellTuple_args)that);
      return false;
    }

    public boolean equals(tellTuple_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_secretKey = true && this.isSetSecretKey();
      boolean that_present_secretKey = true && that.isSetSecretKey();
      if (this_present_secretKey || that_present_secretKey) {
        if (!(this_present_secretKey && that_present_secretKey))
          return false;
        if (!this.secretKey.equals(that.secretKey))
          return false;
      }

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tellTuple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tellTuple_args typedOther = (tellTuple_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(typedOther.isSetSecretKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecretKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, typedOther.secretKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTuple()).compareTo(typedOther.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, typedOther.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tellTuple_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secretKey:");
      if (this.secretKey == null) {
        sb.append("null");
      } else {
        sb.append(this.secretKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tellTuple_argsStandardSchemeFactory implements SchemeFactory {
      public tellTuple_argsStandardScheme getScheme() {
        return new tellTuple_argsStandardScheme();
      }
    }

    private static class tellTuple_argsStandardScheme extends StandardScheme<tellTuple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tellTuple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secretKey = iprot.readString();
                struct.setSecretKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new Tuple();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tellTuple_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.secretKey != null) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secretKey);
          oprot.writeFieldEnd();
        }
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tellTuple_argsTupleSchemeFactory implements SchemeFactory {
      public tellTuple_argsTupleScheme getScheme() {
        return new tellTuple_argsTupleScheme();
      }
    }

    private static class tellTuple_argsTupleScheme extends TupleScheme<tellTuple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tellTuple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetSecretKey()) {
          optionals.set(1);
        }
        if (struct.isSetTuple()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetSecretKey()) {
          oprot.writeString(struct.secretKey);
        }
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tellTuple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secretKey = iprot.readString();
          struct.setSecretKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tuple = new Tuple();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

  }

  public static class tellTupleCollection_args implements org.apache.thrift.TBase<tellTupleCollection_args, tellTupleCollection_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tellTupleCollection_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TUPLE_COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tupleCollection", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tellTupleCollection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tellTupleCollection_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String secretKey; // required
    public TupleCollection tupleCollection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      SECRET_KEY((short)2, "secretKey"),
      TUPLE_COLLECTION((short)3, "tupleCollection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // SECRET_KEY
            return SECRET_KEY;
          case 3: // TUPLE_COLLECTION
            return TUPLE_COLLECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TUPLE_COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("tupleCollection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TupleCollection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tellTupleCollection_args.class, metaDataMap);
    }

    public tellTupleCollection_args() {
    }

    public tellTupleCollection_args(
      String accessKey,
      String secretKey,
      TupleCollection tupleCollection)
    {
      this();
      this.accessKey = accessKey;
      this.secretKey = secretKey;
      this.tupleCollection = tupleCollection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tellTupleCollection_args(tellTupleCollection_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetSecretKey()) {
        this.secretKey = other.secretKey;
      }
      if (other.isSetTupleCollection()) {
        this.tupleCollection = new TupleCollection(other.tupleCollection);
      }
    }

    public tellTupleCollection_args deepCopy() {
      return new tellTupleCollection_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.secretKey = null;
      this.tupleCollection = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public tellTupleCollection_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getSecretKey() {
      return this.secretKey;
    }

    public tellTupleCollection_args setSecretKey(String secretKey) {
      this.secretKey = secretKey;
      return this;
    }

    public void unsetSecretKey() {
      this.secretKey = null;
    }

    /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretKey() {
      return this.secretKey != null;
    }

    public void setSecretKeyIsSet(boolean value) {
      if (!value) {
        this.secretKey = null;
      }
    }

    public TupleCollection getTupleCollection() {
      return this.tupleCollection;
    }

    public tellTupleCollection_args setTupleCollection(TupleCollection tupleCollection) {
      this.tupleCollection = tupleCollection;
      return this;
    }

    public void unsetTupleCollection() {
      this.tupleCollection = null;
    }

    /** Returns true if field tupleCollection is set (has been assigned a value) and false otherwise */
    public boolean isSetTupleCollection() {
      return this.tupleCollection != null;
    }

    public void setTupleCollectionIsSet(boolean value) {
      if (!value) {
        this.tupleCollection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case SECRET_KEY:
        if (value == null) {
          unsetSecretKey();
        } else {
          setSecretKey((String)value);
        }
        break;

      case TUPLE_COLLECTION:
        if (value == null) {
          unsetTupleCollection();
        } else {
          setTupleCollection((TupleCollection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case SECRET_KEY:
        return getSecretKey();

      case TUPLE_COLLECTION:
        return getTupleCollection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case SECRET_KEY:
        return isSetSecretKey();
      case TUPLE_COLLECTION:
        return isSetTupleCollection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tellTupleCollection_args)
        return this.equals((tellTupleCollection_args)that);
      return false;
    }

    public boolean equals(tellTupleCollection_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_secretKey = true && this.isSetSecretKey();
      boolean that_present_secretKey = true && that.isSetSecretKey();
      if (this_present_secretKey || that_present_secretKey) {
        if (!(this_present_secretKey && that_present_secretKey))
          return false;
        if (!this.secretKey.equals(that.secretKey))
          return false;
      }

      boolean this_present_tupleCollection = true && this.isSetTupleCollection();
      boolean that_present_tupleCollection = true && that.isSetTupleCollection();
      if (this_present_tupleCollection || that_present_tupleCollection) {
        if (!(this_present_tupleCollection && that_present_tupleCollection))
          return false;
        if (!this.tupleCollection.equals(that.tupleCollection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tellTupleCollection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tellTupleCollection_args typedOther = (tellTupleCollection_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(typedOther.isSetSecretKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecretKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, typedOther.secretKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTupleCollection()).compareTo(typedOther.isSetTupleCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTupleCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tupleCollection, typedOther.tupleCollection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tellTupleCollection_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secretKey:");
      if (this.secretKey == null) {
        sb.append("null");
      } else {
        sb.append(this.secretKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tupleCollection:");
      if (this.tupleCollection == null) {
        sb.append("null");
      } else {
        sb.append(this.tupleCollection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tupleCollection != null) {
        tupleCollection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tellTupleCollection_argsStandardSchemeFactory implements SchemeFactory {
      public tellTupleCollection_argsStandardScheme getScheme() {
        return new tellTupleCollection_argsStandardScheme();
      }
    }

    private static class tellTupleCollection_argsStandardScheme extends StandardScheme<tellTupleCollection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tellTupleCollection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secretKey = iprot.readString();
                struct.setSecretKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TUPLE_COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tupleCollection = new TupleCollection();
                struct.tupleCollection.read(iprot);
                struct.setTupleCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tellTupleCollection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.secretKey != null) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secretKey);
          oprot.writeFieldEnd();
        }
        if (struct.tupleCollection != null) {
          oprot.writeFieldBegin(TUPLE_COLLECTION_FIELD_DESC);
          struct.tupleCollection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tellTupleCollection_argsTupleSchemeFactory implements SchemeFactory {
      public tellTupleCollection_argsTupleScheme getScheme() {
        return new tellTupleCollection_argsTupleScheme();
      }
    }

    private static class tellTupleCollection_argsTupleScheme extends TupleScheme<tellTupleCollection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tellTupleCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetSecretKey()) {
          optionals.set(1);
        }
        if (struct.isSetTupleCollection()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetSecretKey()) {
          oprot.writeString(struct.secretKey);
        }
        if (struct.isSetTupleCollection()) {
          struct.tupleCollection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tellTupleCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secretKey = iprot.readString();
          struct.setSecretKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tupleCollection = new TupleCollection();
          struct.tupleCollection.read(iprot);
          struct.setTupleCollectionIsSet(true);
        }
      }
    }

  }

  public static class askTuple_args implements org.apache.thrift.TBase<askTuple_args, askTuple_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askTuple_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new askTuple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new askTuple_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String secretKey; // required
    public Tuple tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      SECRET_KEY((short)2, "secretKey"),
      TUPLE((short)3, "tuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // SECRET_KEY
            return SECRET_KEY;
          case 3: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askTuple_args.class, metaDataMap);
    }

    public askTuple_args() {
    }

    public askTuple_args(
      String accessKey,
      String secretKey,
      Tuple tuple)
    {
      this();
      this.accessKey = accessKey;
      this.secretKey = secretKey;
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askTuple_args(askTuple_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetSecretKey()) {
        this.secretKey = other.secretKey;
      }
      if (other.isSetTuple()) {
        this.tuple = new Tuple(other.tuple);
      }
    }

    public askTuple_args deepCopy() {
      return new askTuple_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.secretKey = null;
      this.tuple = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public askTuple_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getSecretKey() {
      return this.secretKey;
    }

    public askTuple_args setSecretKey(String secretKey) {
      this.secretKey = secretKey;
      return this;
    }

    public void unsetSecretKey() {
      this.secretKey = null;
    }

    /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretKey() {
      return this.secretKey != null;
    }

    public void setSecretKeyIsSet(boolean value) {
      if (!value) {
        this.secretKey = null;
      }
    }

    public Tuple getTuple() {
      return this.tuple;
    }

    public askTuple_args setTuple(Tuple tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case SECRET_KEY:
        if (value == null) {
          unsetSecretKey();
        } else {
          setSecretKey((String)value);
        }
        break;

      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((Tuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case SECRET_KEY:
        return getSecretKey();

      case TUPLE:
        return getTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case SECRET_KEY:
        return isSetSecretKey();
      case TUPLE:
        return isSetTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askTuple_args)
        return this.equals((askTuple_args)that);
      return false;
    }

    public boolean equals(askTuple_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_secretKey = true && this.isSetSecretKey();
      boolean that_present_secretKey = true && that.isSetSecretKey();
      if (this_present_secretKey || that_present_secretKey) {
        if (!(this_present_secretKey && that_present_secretKey))
          return false;
        if (!this.secretKey.equals(that.secretKey))
          return false;
      }

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(askTuple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      askTuple_args typedOther = (askTuple_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(typedOther.isSetSecretKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecretKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, typedOther.secretKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTuple()).compareTo(typedOther.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, typedOther.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askTuple_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secretKey:");
      if (this.secretKey == null) {
        sb.append("null");
      } else {
        sb.append(this.secretKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class askTuple_argsStandardSchemeFactory implements SchemeFactory {
      public askTuple_argsStandardScheme getScheme() {
        return new askTuple_argsStandardScheme();
      }
    }

    private static class askTuple_argsStandardScheme extends StandardScheme<askTuple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, askTuple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secretKey = iprot.readString();
                struct.setSecretKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new Tuple();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, askTuple_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.secretKey != null) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secretKey);
          oprot.writeFieldEnd();
        }
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class askTuple_argsTupleSchemeFactory implements SchemeFactory {
      public askTuple_argsTupleScheme getScheme() {
        return new askTuple_argsTupleScheme();
      }
    }

    private static class askTuple_argsTupleScheme extends TupleScheme<askTuple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, askTuple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetSecretKey()) {
          optionals.set(1);
        }
        if (struct.isSetTuple()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetSecretKey()) {
          oprot.writeString(struct.secretKey);
        }
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, askTuple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secretKey = iprot.readString();
          struct.setSecretKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tuple = new Tuple();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

  }

  public static class askTuple_result implements org.apache.thrift.TBase<askTuple_result, askTuple_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askTuple_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new askTuple_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new askTuple_resultTupleSchemeFactory());
    }

    public TupleCollection success; // required
    public UReactiveServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TupleCollection.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askTuple_result.class, metaDataMap);
    }

    public askTuple_result() {
    }

    public askTuple_result(
      TupleCollection success,
      UReactiveServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askTuple_result(askTuple_result other) {
      if (other.isSetSuccess()) {
        this.success = new TupleCollection(other.success);
      }
      if (other.isSetE()) {
        this.e = new UReactiveServiceException(other.e);
      }
    }

    public askTuple_result deepCopy() {
      return new askTuple_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TupleCollection getSuccess() {
      return this.success;
    }

    public askTuple_result setSuccess(TupleCollection success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UReactiveServiceException getE() {
      return this.e;
    }

    public askTuple_result setE(UReactiveServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TupleCollection)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UReactiveServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askTuple_result)
        return this.equals((askTuple_result)that);
      return false;
    }

    public boolean equals(askTuple_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(askTuple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      askTuple_result typedOther = (askTuple_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askTuple_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class askTuple_resultStandardSchemeFactory implements SchemeFactory {
      public askTuple_resultStandardScheme getScheme() {
        return new askTuple_resultStandardScheme();
      }
    }

    private static class askTuple_resultStandardScheme extends StandardScheme<askTuple_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, askTuple_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TupleCollection();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UReactiveServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, askTuple_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class askTuple_resultTupleSchemeFactory implements SchemeFactory {
      public askTuple_resultTupleScheme getScheme() {
        return new askTuple_resultTupleScheme();
      }
    }

    private static class askTuple_resultTupleScheme extends TupleScheme<askTuple_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, askTuple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, askTuple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TupleCollection();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new UReactiveServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class askTupleCollection_args implements org.apache.thrift.TBase<askTupleCollection_args, askTupleCollection_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askTupleCollection_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TUPLE_COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tupleCollection", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new askTupleCollection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new askTupleCollection_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String secretKey; // required
    public TupleCollection tupleCollection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      SECRET_KEY((short)2, "secretKey"),
      TUPLE_COLLECTION((short)3, "tupleCollection");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // SECRET_KEY
            return SECRET_KEY;
          case 3: // TUPLE_COLLECTION
            return TUPLE_COLLECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TUPLE_COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("tupleCollection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TupleCollection.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askTupleCollection_args.class, metaDataMap);
    }

    public askTupleCollection_args() {
    }

    public askTupleCollection_args(
      String accessKey,
      String secretKey,
      TupleCollection tupleCollection)
    {
      this();
      this.accessKey = accessKey;
      this.secretKey = secretKey;
      this.tupleCollection = tupleCollection;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askTupleCollection_args(askTupleCollection_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetSecretKey()) {
        this.secretKey = other.secretKey;
      }
      if (other.isSetTupleCollection()) {
        this.tupleCollection = new TupleCollection(other.tupleCollection);
      }
    }

    public askTupleCollection_args deepCopy() {
      return new askTupleCollection_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.secretKey = null;
      this.tupleCollection = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public askTupleCollection_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getSecretKey() {
      return this.secretKey;
    }

    public askTupleCollection_args setSecretKey(String secretKey) {
      this.secretKey = secretKey;
      return this;
    }

    public void unsetSecretKey() {
      this.secretKey = null;
    }

    /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretKey() {
      return this.secretKey != null;
    }

    public void setSecretKeyIsSet(boolean value) {
      if (!value) {
        this.secretKey = null;
      }
    }

    public TupleCollection getTupleCollection() {
      return this.tupleCollection;
    }

    public askTupleCollection_args setTupleCollection(TupleCollection tupleCollection) {
      this.tupleCollection = tupleCollection;
      return this;
    }

    public void unsetTupleCollection() {
      this.tupleCollection = null;
    }

    /** Returns true if field tupleCollection is set (has been assigned a value) and false otherwise */
    public boolean isSetTupleCollection() {
      return this.tupleCollection != null;
    }

    public void setTupleCollectionIsSet(boolean value) {
      if (!value) {
        this.tupleCollection = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case SECRET_KEY:
        if (value == null) {
          unsetSecretKey();
        } else {
          setSecretKey((String)value);
        }
        break;

      case TUPLE_COLLECTION:
        if (value == null) {
          unsetTupleCollection();
        } else {
          setTupleCollection((TupleCollection)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case SECRET_KEY:
        return getSecretKey();

      case TUPLE_COLLECTION:
        return getTupleCollection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case SECRET_KEY:
        return isSetSecretKey();
      case TUPLE_COLLECTION:
        return isSetTupleCollection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askTupleCollection_args)
        return this.equals((askTupleCollection_args)that);
      return false;
    }

    public boolean equals(askTupleCollection_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_secretKey = true && this.isSetSecretKey();
      boolean that_present_secretKey = true && that.isSetSecretKey();
      if (this_present_secretKey || that_present_secretKey) {
        if (!(this_present_secretKey && that_present_secretKey))
          return false;
        if (!this.secretKey.equals(that.secretKey))
          return false;
      }

      boolean this_present_tupleCollection = true && this.isSetTupleCollection();
      boolean that_present_tupleCollection = true && that.isSetTupleCollection();
      if (this_present_tupleCollection || that_present_tupleCollection) {
        if (!(this_present_tupleCollection && that_present_tupleCollection))
          return false;
        if (!this.tupleCollection.equals(that.tupleCollection))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(askTupleCollection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      askTupleCollection_args typedOther = (askTupleCollection_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(typedOther.isSetSecretKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecretKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, typedOther.secretKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTupleCollection()).compareTo(typedOther.isSetTupleCollection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTupleCollection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tupleCollection, typedOther.tupleCollection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askTupleCollection_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secretKey:");
      if (this.secretKey == null) {
        sb.append("null");
      } else {
        sb.append(this.secretKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tupleCollection:");
      if (this.tupleCollection == null) {
        sb.append("null");
      } else {
        sb.append(this.tupleCollection);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tupleCollection != null) {
        tupleCollection.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class askTupleCollection_argsStandardSchemeFactory implements SchemeFactory {
      public askTupleCollection_argsStandardScheme getScheme() {
        return new askTupleCollection_argsStandardScheme();
      }
    }

    private static class askTupleCollection_argsStandardScheme extends StandardScheme<askTupleCollection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, askTupleCollection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secretKey = iprot.readString();
                struct.setSecretKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TUPLE_COLLECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tupleCollection = new TupleCollection();
                struct.tupleCollection.read(iprot);
                struct.setTupleCollectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, askTupleCollection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.secretKey != null) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secretKey);
          oprot.writeFieldEnd();
        }
        if (struct.tupleCollection != null) {
          oprot.writeFieldBegin(TUPLE_COLLECTION_FIELD_DESC);
          struct.tupleCollection.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class askTupleCollection_argsTupleSchemeFactory implements SchemeFactory {
      public askTupleCollection_argsTupleScheme getScheme() {
        return new askTupleCollection_argsTupleScheme();
      }
    }

    private static class askTupleCollection_argsTupleScheme extends TupleScheme<askTupleCollection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, askTupleCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetSecretKey()) {
          optionals.set(1);
        }
        if (struct.isSetTupleCollection()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetSecretKey()) {
          oprot.writeString(struct.secretKey);
        }
        if (struct.isSetTupleCollection()) {
          struct.tupleCollection.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, askTupleCollection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secretKey = iprot.readString();
          struct.setSecretKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tupleCollection = new TupleCollection();
          struct.tupleCollection.read(iprot);
          struct.setTupleCollectionIsSet(true);
        }
      }
    }

  }

  public static class askTupleCollection_result implements org.apache.thrift.TBase<askTupleCollection_result, askTupleCollection_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askTupleCollection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new askTupleCollection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new askTupleCollection_resultTupleSchemeFactory());
    }

    public TupleCollection success; // required
    public UReactiveServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TupleCollection.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askTupleCollection_result.class, metaDataMap);
    }

    public askTupleCollection_result() {
    }

    public askTupleCollection_result(
      TupleCollection success,
      UReactiveServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askTupleCollection_result(askTupleCollection_result other) {
      if (other.isSetSuccess()) {
        this.success = new TupleCollection(other.success);
      }
      if (other.isSetE()) {
        this.e = new UReactiveServiceException(other.e);
      }
    }

    public askTupleCollection_result deepCopy() {
      return new askTupleCollection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TupleCollection getSuccess() {
      return this.success;
    }

    public askTupleCollection_result setSuccess(TupleCollection success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UReactiveServiceException getE() {
      return this.e;
    }

    public askTupleCollection_result setE(UReactiveServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TupleCollection)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UReactiveServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askTupleCollection_result)
        return this.equals((askTupleCollection_result)that);
      return false;
    }

    public boolean equals(askTupleCollection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(askTupleCollection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      askTupleCollection_result typedOther = (askTupleCollection_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askTupleCollection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class askTupleCollection_resultStandardSchemeFactory implements SchemeFactory {
      public askTupleCollection_resultStandardScheme getScheme() {
        return new askTupleCollection_resultStandardScheme();
      }
    }

    private static class askTupleCollection_resultStandardScheme extends StandardScheme<askTupleCollection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, askTupleCollection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TupleCollection();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UReactiveServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, askTupleCollection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class askTupleCollection_resultTupleSchemeFactory implements SchemeFactory {
      public askTupleCollection_resultTupleScheme getScheme() {
        return new askTupleCollection_resultTupleScheme();
      }
    }

    private static class askTupleCollection_resultTupleScheme extends TupleScheme<askTupleCollection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, askTupleCollection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, askTupleCollection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TupleCollection();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new UReactiveServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class poll_args implements org.apache.thrift.TBase<poll_args, poll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("poll_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new poll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new poll_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String secretKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      SECRET_KEY((short)2, "secretKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // SECRET_KEY
            return SECRET_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(poll_args.class, metaDataMap);
    }

    public poll_args() {
    }

    public poll_args(
      String accessKey,
      String secretKey)
    {
      this();
      this.accessKey = accessKey;
      this.secretKey = secretKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public poll_args(poll_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetSecretKey()) {
        this.secretKey = other.secretKey;
      }
    }

    public poll_args deepCopy() {
      return new poll_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.secretKey = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public poll_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getSecretKey() {
      return this.secretKey;
    }

    public poll_args setSecretKey(String secretKey) {
      this.secretKey = secretKey;
      return this;
    }

    public void unsetSecretKey() {
      this.secretKey = null;
    }

    /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretKey() {
      return this.secretKey != null;
    }

    public void setSecretKeyIsSet(boolean value) {
      if (!value) {
        this.secretKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case SECRET_KEY:
        if (value == null) {
          unsetSecretKey();
        } else {
          setSecretKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case SECRET_KEY:
        return getSecretKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case SECRET_KEY:
        return isSetSecretKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof poll_args)
        return this.equals((poll_args)that);
      return false;
    }

    public boolean equals(poll_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_secretKey = true && this.isSetSecretKey();
      boolean that_present_secretKey = true && that.isSetSecretKey();
      if (this_present_secretKey || that_present_secretKey) {
        if (!(this_present_secretKey && that_present_secretKey))
          return false;
        if (!this.secretKey.equals(that.secretKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(poll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      poll_args typedOther = (poll_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(typedOther.isSetSecretKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecretKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, typedOther.secretKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("poll_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secretKey:");
      if (this.secretKey == null) {
        sb.append("null");
      } else {
        sb.append(this.secretKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class poll_argsStandardSchemeFactory implements SchemeFactory {
      public poll_argsStandardScheme getScheme() {
        return new poll_argsStandardScheme();
      }
    }

    private static class poll_argsStandardScheme extends StandardScheme<poll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, poll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secretKey = iprot.readString();
                struct.setSecretKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, poll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.secretKey != null) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secretKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class poll_argsTupleSchemeFactory implements SchemeFactory {
      public poll_argsTupleScheme getScheme() {
        return new poll_argsTupleScheme();
      }
    }

    private static class poll_argsTupleScheme extends TupleScheme<poll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetSecretKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetSecretKey()) {
          oprot.writeString(struct.secretKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secretKey = iprot.readString();
          struct.setSecretKeyIsSet(true);
        }
      }
    }

  }

  public static class poll_result implements org.apache.thrift.TBase<poll_result, poll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("poll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new poll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new poll_resultTupleSchemeFactory());
    }

    public TupleCollection success; // required
    public UReactiveServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TupleCollection.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(poll_result.class, metaDataMap);
    }

    public poll_result() {
    }

    public poll_result(
      TupleCollection success,
      UReactiveServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public poll_result(poll_result other) {
      if (other.isSetSuccess()) {
        this.success = new TupleCollection(other.success);
      }
      if (other.isSetE()) {
        this.e = new UReactiveServiceException(other.e);
      }
    }

    public poll_result deepCopy() {
      return new poll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TupleCollection getSuccess() {
      return this.success;
    }

    public poll_result setSuccess(TupleCollection success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UReactiveServiceException getE() {
      return this.e;
    }

    public poll_result setE(UReactiveServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TupleCollection)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((UReactiveServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof poll_result)
        return this.equals((poll_result)that);
      return false;
    }

    public boolean equals(poll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(poll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      poll_result typedOther = (poll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("poll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class poll_resultStandardSchemeFactory implements SchemeFactory {
      public poll_resultStandardScheme getScheme() {
        return new poll_resultStandardScheme();
      }
    }

    private static class poll_resultStandardScheme extends StandardScheme<poll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, poll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TupleCollection();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new UReactiveServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, poll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class poll_resultTupleSchemeFactory implements SchemeFactory {
      public poll_resultTupleScheme getScheme() {
        return new poll_resultTupleScheme();
      }
    }

    private static class poll_resultTupleScheme extends TupleScheme<poll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TupleCollection();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new UReactiveServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
