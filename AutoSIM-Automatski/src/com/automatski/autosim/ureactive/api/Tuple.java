/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.automatski.autosim.ureactive.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Tuple implements org.apache.thrift.TBase<Tuple, Tuple._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tuple");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CORRELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("correlationId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORY_GUIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryGuids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("json", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TupleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TupleTupleSchemeFactory());
  }

  public String id; // required
  public String correlationId; // required
  public List<String> categoryGuids; // required
  public Map<String,String> headers; // required
  public String json; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CORRELATION_ID((short)2, "correlationId"),
    CATEGORY_GUIDS((short)3, "categoryGuids"),
    HEADERS((short)4, "headers"),
    JSON((short)5, "json");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CORRELATION_ID
          return CORRELATION_ID;
        case 3: // CATEGORY_GUIDS
          return CATEGORY_GUIDS;
        case 4: // HEADERS
          return HEADERS;
        case 5: // JSON
          return JSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORRELATION_ID, new org.apache.thrift.meta_data.FieldMetaData("correlationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_GUIDS, new org.apache.thrift.meta_data.FieldMetaData("categoryGuids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tuple.class, metaDataMap);
  }

  public Tuple() {
  }

  public Tuple(
    String id,
    String correlationId,
    List<String> categoryGuids,
    Map<String,String> headers,
    String json)
  {
    this();
    this.id = id;
    this.correlationId = correlationId;
    this.categoryGuids = categoryGuids;
    this.headers = headers;
    this.json = json;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tuple(Tuple other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCorrelationId()) {
      this.correlationId = other.correlationId;
    }
    if (other.isSetCategoryGuids()) {
      List<String> __this__categoryGuids = new ArrayList<String>();
      for (String other_element : other.categoryGuids) {
        __this__categoryGuids.add(other_element);
      }
      this.categoryGuids = __this__categoryGuids;
    }
    if (other.isSetHeaders()) {
      Map<String,String> __this__headers = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.headers.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__headers_copy_key = other_element_key;

        String __this__headers_copy_value = other_element_value;

        __this__headers.put(__this__headers_copy_key, __this__headers_copy_value);
      }
      this.headers = __this__headers;
    }
    if (other.isSetJson()) {
      this.json = other.json;
    }
  }

  public Tuple deepCopy() {
    return new Tuple(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.correlationId = null;
    this.categoryGuids = null;
    this.headers = null;
    this.json = null;
  }

  public String getId() {
    return this.id;
  }

  public Tuple setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getCorrelationId() {
    return this.correlationId;
  }

  public Tuple setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  public void unsetCorrelationId() {
    this.correlationId = null;
  }

  /** Returns true if field correlationId is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrelationId() {
    return this.correlationId != null;
  }

  public void setCorrelationIdIsSet(boolean value) {
    if (!value) {
      this.correlationId = null;
    }
  }

  public int getCategoryGuidsSize() {
    return (this.categoryGuids == null) ? 0 : this.categoryGuids.size();
  }

  public java.util.Iterator<String> getCategoryGuidsIterator() {
    return (this.categoryGuids == null) ? null : this.categoryGuids.iterator();
  }

  public void addToCategoryGuids(String elem) {
    if (this.categoryGuids == null) {
      this.categoryGuids = new ArrayList<String>();
    }
    this.categoryGuids.add(elem);
  }

  public List<String> getCategoryGuids() {
    return this.categoryGuids;
  }

  public Tuple setCategoryGuids(List<String> categoryGuids) {
    this.categoryGuids = categoryGuids;
    return this;
  }

  public void unsetCategoryGuids() {
    this.categoryGuids = null;
  }

  /** Returns true if field categoryGuids is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryGuids() {
    return this.categoryGuids != null;
  }

  public void setCategoryGuidsIsSet(boolean value) {
    if (!value) {
      this.categoryGuids = null;
    }
  }

  public int getHeadersSize() {
    return (this.headers == null) ? 0 : this.headers.size();
  }

  public void putToHeaders(String key, String val) {
    if (this.headers == null) {
      this.headers = new HashMap<String,String>();
    }
    this.headers.put(key, val);
  }

  public Map<String,String> getHeaders() {
    return this.headers;
  }

  public Tuple setHeaders(Map<String,String> headers) {
    this.headers = headers;
    return this;
  }

  public void unsetHeaders() {
    this.headers = null;
  }

  /** Returns true if field headers is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaders() {
    return this.headers != null;
  }

  public void setHeadersIsSet(boolean value) {
    if (!value) {
      this.headers = null;
    }
  }

  public String getJson() {
    return this.json;
  }

  public Tuple setJson(String json) {
    this.json = json;
    return this;
  }

  public void unsetJson() {
    this.json = null;
  }

  /** Returns true if field json is set (has been assigned a value) and false otherwise */
  public boolean isSetJson() {
    return this.json != null;
  }

  public void setJsonIsSet(boolean value) {
    if (!value) {
      this.json = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CORRELATION_ID:
      if (value == null) {
        unsetCorrelationId();
      } else {
        setCorrelationId((String)value);
      }
      break;

    case CATEGORY_GUIDS:
      if (value == null) {
        unsetCategoryGuids();
      } else {
        setCategoryGuids((List<String>)value);
      }
      break;

    case HEADERS:
      if (value == null) {
        unsetHeaders();
      } else {
        setHeaders((Map<String,String>)value);
      }
      break;

    case JSON:
      if (value == null) {
        unsetJson();
      } else {
        setJson((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CORRELATION_ID:
      return getCorrelationId();

    case CATEGORY_GUIDS:
      return getCategoryGuids();

    case HEADERS:
      return getHeaders();

    case JSON:
      return getJson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CORRELATION_ID:
      return isSetCorrelationId();
    case CATEGORY_GUIDS:
      return isSetCategoryGuids();
    case HEADERS:
      return isSetHeaders();
    case JSON:
      return isSetJson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tuple)
      return this.equals((Tuple)that);
    return false;
  }

  public boolean equals(Tuple that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_correlationId = true && this.isSetCorrelationId();
    boolean that_present_correlationId = true && that.isSetCorrelationId();
    if (this_present_correlationId || that_present_correlationId) {
      if (!(this_present_correlationId && that_present_correlationId))
        return false;
      if (!this.correlationId.equals(that.correlationId))
        return false;
    }

    boolean this_present_categoryGuids = true && this.isSetCategoryGuids();
    boolean that_present_categoryGuids = true && that.isSetCategoryGuids();
    if (this_present_categoryGuids || that_present_categoryGuids) {
      if (!(this_present_categoryGuids && that_present_categoryGuids))
        return false;
      if (!this.categoryGuids.equals(that.categoryGuids))
        return false;
    }

    boolean this_present_headers = true && this.isSetHeaders();
    boolean that_present_headers = true && that.isSetHeaders();
    if (this_present_headers || that_present_headers) {
      if (!(this_present_headers && that_present_headers))
        return false;
      if (!this.headers.equals(that.headers))
        return false;
    }

    boolean this_present_json = true && this.isSetJson();
    boolean that_present_json = true && that.isSetJson();
    if (this_present_json || that_present_json) {
      if (!(this_present_json && that_present_json))
        return false;
      if (!this.json.equals(that.json))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Tuple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Tuple typedOther = (Tuple)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrelationId()).compareTo(typedOther.isSetCorrelationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrelationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correlationId, typedOther.correlationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryGuids()).compareTo(typedOther.isSetCategoryGuids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryGuids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryGuids, typedOther.categoryGuids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(typedOther.isSetHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, typedOther.headers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJson()).compareTo(typedOther.isSetJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, typedOther.json);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tuple(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correlationId:");
    if (this.correlationId == null) {
      sb.append("null");
    } else {
      sb.append(this.correlationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryGuids:");
    if (this.categoryGuids == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryGuids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headers:");
    if (this.headers == null) {
      sb.append("null");
    } else {
      sb.append(this.headers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("json:");
    if (this.json == null) {
      sb.append("null");
    } else {
      sb.append(this.json);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TupleStandardSchemeFactory implements SchemeFactory {
    public TupleStandardScheme getScheme() {
      return new TupleStandardScheme();
    }
  }

  private static class TupleStandardScheme extends StandardScheme<Tuple> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tuple struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CORRELATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.correlationId = iprot.readString();
              struct.setCorrelationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATEGORY_GUIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.categoryGuids = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.categoryGuids.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setCategoryGuidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.headers = new HashMap<String,String>(2*_map3.size);
                for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                {
                  String _key5; // required
                  String _val6; // required
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.headers.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.json = iprot.readString();
              struct.setJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tuple struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.correlationId != null) {
        oprot.writeFieldBegin(CORRELATION_ID_FIELD_DESC);
        oprot.writeString(struct.correlationId);
        oprot.writeFieldEnd();
      }
      if (struct.categoryGuids != null) {
        oprot.writeFieldBegin(CATEGORY_GUIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.categoryGuids.size()));
          for (String _iter7 : struct.categoryGuids)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.headers != null) {
        oprot.writeFieldBegin(HEADERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headers.size()));
          for (Map.Entry<String, String> _iter8 : struct.headers.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeString(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.json != null) {
        oprot.writeFieldBegin(JSON_FIELD_DESC);
        oprot.writeString(struct.json);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TupleTupleSchemeFactory implements SchemeFactory {
    public TupleTupleScheme getScheme() {
      return new TupleTupleScheme();
    }
  }

  private static class TupleTupleScheme extends TupleScheme<Tuple> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tuple struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCorrelationId()) {
        optionals.set(1);
      }
      if (struct.isSetCategoryGuids()) {
        optionals.set(2);
      }
      if (struct.isSetHeaders()) {
        optionals.set(3);
      }
      if (struct.isSetJson()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCorrelationId()) {
        oprot.writeString(struct.correlationId);
      }
      if (struct.isSetCategoryGuids()) {
        {
          oprot.writeI32(struct.categoryGuids.size());
          for (String _iter9 : struct.categoryGuids)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetHeaders()) {
        {
          oprot.writeI32(struct.headers.size());
          for (Map.Entry<String, String> _iter10 : struct.headers.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
      if (struct.isSetJson()) {
        oprot.writeString(struct.json);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tuple struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.correlationId = iprot.readString();
        struct.setCorrelationIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.categoryGuids = new ArrayList<String>(_list11.size);
          for (int _i12 = 0; _i12 < _list11.size; ++_i12)
          {
            String _elem13; // required
            _elem13 = iprot.readString();
            struct.categoryGuids.add(_elem13);
          }
        }
        struct.setCategoryGuidsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.headers = new HashMap<String,String>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16; // required
            String _val17; // required
            _key16 = iprot.readString();
            _val17 = iprot.readString();
            struct.headers.put(_key16, _val17);
          }
        }
        struct.setHeadersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.json = iprot.readString();
        struct.setJsonIsSet(true);
      }
    }
  }

}

