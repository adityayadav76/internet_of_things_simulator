/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.automatski.autosim.streamer.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Streamer {

  public interface Iface {

    public void tellTuple(String accessKey, String secretKey, Tuple tuple) throws org.apache.thrift.TException;

    public void tellTuples(String accessKey, String secretKey, List<Tuple> tuples) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void tellTuple(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tellTuple_call> resultHandler) throws org.apache.thrift.TException;

    public void tellTuples(String accessKey, String secretKey, List<Tuple> tuples, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tellTuples_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void tellTuple(String accessKey, String secretKey, Tuple tuple) throws org.apache.thrift.TException
    {
      send_tellTuple(accessKey, secretKey, tuple);
    }

    public void send_tellTuple(String accessKey, String secretKey, Tuple tuple) throws org.apache.thrift.TException
    {
      tellTuple_args args = new tellTuple_args();
      args.setAccessKey(accessKey);
      args.setSecretKey(secretKey);
      args.setTuple(tuple);
      sendBase("tellTuple", args);
    }

    public void tellTuples(String accessKey, String secretKey, List<Tuple> tuples) throws org.apache.thrift.TException
    {
      send_tellTuples(accessKey, secretKey, tuples);
    }

    public void send_tellTuples(String accessKey, String secretKey, List<Tuple> tuples) throws org.apache.thrift.TException
    {
      tellTuples_args args = new tellTuples_args();
      args.setAccessKey(accessKey);
      args.setSecretKey(secretKey);
      args.setTuples(tuples);
      sendBase("tellTuples", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void tellTuple(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<tellTuple_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tellTuple_call method_call = new tellTuple_call(accessKey, secretKey, tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tellTuple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String secretKey;
      private Tuple tuple;
      public tellTuple_call(String accessKey, String secretKey, Tuple tuple, org.apache.thrift.async.AsyncMethodCallback<tellTuple_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tellTuple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tellTuple_args args = new tellTuple_args();
        args.setAccessKey(accessKey);
        args.setSecretKey(secretKey);
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void tellTuples(String accessKey, String secretKey, List<Tuple> tuples, org.apache.thrift.async.AsyncMethodCallback<tellTuples_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tellTuples_call method_call = new tellTuples_call(accessKey, secretKey, tuples, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tellTuples_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessKey;
      private String secretKey;
      private List<Tuple> tuples;
      public tellTuples_call(String accessKey, String secretKey, List<Tuple> tuples, org.apache.thrift.async.AsyncMethodCallback<tellTuples_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.tuples = tuples;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tellTuples", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tellTuples_args args = new tellTuples_args();
        args.setAccessKey(accessKey);
        args.setSecretKey(secretKey);
        args.setTuples(tuples);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("tellTuple", new tellTuple());
      processMap.put("tellTuples", new tellTuples());
      return processMap;
    }

    public static class tellTuple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tellTuple_args> {
      public tellTuple() {
        super("tellTuple");
      }

      public tellTuple_args getEmptyArgsInstance() {
        return new tellTuple_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, tellTuple_args args) throws org.apache.thrift.TException {
        iface.tellTuple(args.accessKey, args.secretKey, args.tuple);
        return null;
      }
    }

    public static class tellTuples<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tellTuples_args> {
      public tellTuples() {
        super("tellTuples");
      }

      public tellTuples_args getEmptyArgsInstance() {
        return new tellTuples_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, tellTuples_args args) throws org.apache.thrift.TException {
        iface.tellTuples(args.accessKey, args.secretKey, args.tuples);
        return null;
      }
    }

  }

  public static class tellTuple_args implements org.apache.thrift.TBase<tellTuple_args, tellTuple_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tellTuple_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tellTuple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tellTuple_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String secretKey; // required
    public Tuple tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      SECRET_KEY((short)2, "secretKey"),
      TUPLE((short)3, "tuple");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // SECRET_KEY
            return SECRET_KEY;
          case 3: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tuple.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tellTuple_args.class, metaDataMap);
    }

    public tellTuple_args() {
    }

    public tellTuple_args(
      String accessKey,
      String secretKey,
      Tuple tuple)
    {
      this();
      this.accessKey = accessKey;
      this.secretKey = secretKey;
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tellTuple_args(tellTuple_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetSecretKey()) {
        this.secretKey = other.secretKey;
      }
      if (other.isSetTuple()) {
        this.tuple = new Tuple(other.tuple);
      }
    }

    public tellTuple_args deepCopy() {
      return new tellTuple_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.secretKey = null;
      this.tuple = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public tellTuple_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getSecretKey() {
      return this.secretKey;
    }

    public tellTuple_args setSecretKey(String secretKey) {
      this.secretKey = secretKey;
      return this;
    }

    public void unsetSecretKey() {
      this.secretKey = null;
    }

    /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretKey() {
      return this.secretKey != null;
    }

    public void setSecretKeyIsSet(boolean value) {
      if (!value) {
        this.secretKey = null;
      }
    }

    public Tuple getTuple() {
      return this.tuple;
    }

    public tellTuple_args setTuple(Tuple tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case SECRET_KEY:
        if (value == null) {
          unsetSecretKey();
        } else {
          setSecretKey((String)value);
        }
        break;

      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((Tuple)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case SECRET_KEY:
        return getSecretKey();

      case TUPLE:
        return getTuple();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case SECRET_KEY:
        return isSetSecretKey();
      case TUPLE:
        return isSetTuple();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tellTuple_args)
        return this.equals((tellTuple_args)that);
      return false;
    }

    public boolean equals(tellTuple_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_secretKey = true && this.isSetSecretKey();
      boolean that_present_secretKey = true && that.isSetSecretKey();
      if (this_present_secretKey || that_present_secretKey) {
        if (!(this_present_secretKey && that_present_secretKey))
          return false;
        if (!this.secretKey.equals(that.secretKey))
          return false;
      }

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tellTuple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tellTuple_args typedOther = (tellTuple_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(typedOther.isSetSecretKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecretKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, typedOther.secretKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTuple()).compareTo(typedOther.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, typedOther.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tellTuple_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secretKey:");
      if (this.secretKey == null) {
        sb.append("null");
      } else {
        sb.append(this.secretKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tellTuple_argsStandardSchemeFactory implements SchemeFactory {
      public tellTuple_argsStandardScheme getScheme() {
        return new tellTuple_argsStandardScheme();
      }
    }

    private static class tellTuple_argsStandardScheme extends StandardScheme<tellTuple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tellTuple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secretKey = iprot.readString();
                struct.setSecretKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new Tuple();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tellTuple_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.secretKey != null) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secretKey);
          oprot.writeFieldEnd();
        }
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tellTuple_argsTupleSchemeFactory implements SchemeFactory {
      public tellTuple_argsTupleScheme getScheme() {
        return new tellTuple_argsTupleScheme();
      }
    }

    private static class tellTuple_argsTupleScheme extends TupleScheme<tellTuple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tellTuple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetSecretKey()) {
          optionals.set(1);
        }
        if (struct.isSetTuple()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetSecretKey()) {
          oprot.writeString(struct.secretKey);
        }
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tellTuple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secretKey = iprot.readString();
          struct.setSecretKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tuple = new Tuple();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

  }

  public static class tellTuples_args implements org.apache.thrift.TBase<tellTuples_args, tellTuples_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tellTuples_args");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("tuples", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tellTuples_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tellTuples_argsTupleSchemeFactory());
    }

    public String accessKey; // required
    public String secretKey; // required
    public List<Tuple> tuples; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_KEY((short)1, "accessKey"),
      SECRET_KEY((short)2, "secretKey"),
      TUPLES((short)3, "tuples");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_KEY
            return ACCESS_KEY;
          case 2: // SECRET_KEY
            return SECRET_KEY;
          case 3: // TUPLES
            return TUPLES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TUPLES, new org.apache.thrift.meta_data.FieldMetaData("tuples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tuple.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tellTuples_args.class, metaDataMap);
    }

    public tellTuples_args() {
    }

    public tellTuples_args(
      String accessKey,
      String secretKey,
      List<Tuple> tuples)
    {
      this();
      this.accessKey = accessKey;
      this.secretKey = secretKey;
      this.tuples = tuples;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tellTuples_args(tellTuples_args other) {
      if (other.isSetAccessKey()) {
        this.accessKey = other.accessKey;
      }
      if (other.isSetSecretKey()) {
        this.secretKey = other.secretKey;
      }
      if (other.isSetTuples()) {
        List<Tuple> __this__tuples = new ArrayList<Tuple>();
        for (Tuple other_element : other.tuples) {
          __this__tuples.add(new Tuple(other_element));
        }
        this.tuples = __this__tuples;
      }
    }

    public tellTuples_args deepCopy() {
      return new tellTuples_args(this);
    }

    @Override
    public void clear() {
      this.accessKey = null;
      this.secretKey = null;
      this.tuples = null;
    }

    public String getAccessKey() {
      return this.accessKey;
    }

    public tellTuples_args setAccessKey(String accessKey) {
      this.accessKey = accessKey;
      return this;
    }

    public void unsetAccessKey() {
      this.accessKey = null;
    }

    /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKey() {
      return this.accessKey != null;
    }

    public void setAccessKeyIsSet(boolean value) {
      if (!value) {
        this.accessKey = null;
      }
    }

    public String getSecretKey() {
      return this.secretKey;
    }

    public tellTuples_args setSecretKey(String secretKey) {
      this.secretKey = secretKey;
      return this;
    }

    public void unsetSecretKey() {
      this.secretKey = null;
    }

    /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretKey() {
      return this.secretKey != null;
    }

    public void setSecretKeyIsSet(boolean value) {
      if (!value) {
        this.secretKey = null;
      }
    }

    public int getTuplesSize() {
      return (this.tuples == null) ? 0 : this.tuples.size();
    }

    public java.util.Iterator<Tuple> getTuplesIterator() {
      return (this.tuples == null) ? null : this.tuples.iterator();
    }

    public void addToTuples(Tuple elem) {
      if (this.tuples == null) {
        this.tuples = new ArrayList<Tuple>();
      }
      this.tuples.add(elem);
    }

    public List<Tuple> getTuples() {
      return this.tuples;
    }

    public tellTuples_args setTuples(List<Tuple> tuples) {
      this.tuples = tuples;
      return this;
    }

    public void unsetTuples() {
      this.tuples = null;
    }

    /** Returns true if field tuples is set (has been assigned a value) and false otherwise */
    public boolean isSetTuples() {
      return this.tuples != null;
    }

    public void setTuplesIsSet(boolean value) {
      if (!value) {
        this.tuples = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_KEY:
        if (value == null) {
          unsetAccessKey();
        } else {
          setAccessKey((String)value);
        }
        break;

      case SECRET_KEY:
        if (value == null) {
          unsetSecretKey();
        } else {
          setSecretKey((String)value);
        }
        break;

      case TUPLES:
        if (value == null) {
          unsetTuples();
        } else {
          setTuples((List<Tuple>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_KEY:
        return getAccessKey();

      case SECRET_KEY:
        return getSecretKey();

      case TUPLES:
        return getTuples();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_KEY:
        return isSetAccessKey();
      case SECRET_KEY:
        return isSetSecretKey();
      case TUPLES:
        return isSetTuples();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tellTuples_args)
        return this.equals((tellTuples_args)that);
      return false;
    }

    public boolean equals(tellTuples_args that) {
      if (that == null)
        return false;

      boolean this_present_accessKey = true && this.isSetAccessKey();
      boolean that_present_accessKey = true && that.isSetAccessKey();
      if (this_present_accessKey || that_present_accessKey) {
        if (!(this_present_accessKey && that_present_accessKey))
          return false;
        if (!this.accessKey.equals(that.accessKey))
          return false;
      }

      boolean this_present_secretKey = true && this.isSetSecretKey();
      boolean that_present_secretKey = true && that.isSetSecretKey();
      if (this_present_secretKey || that_present_secretKey) {
        if (!(this_present_secretKey && that_present_secretKey))
          return false;
        if (!this.secretKey.equals(that.secretKey))
          return false;
      }

      boolean this_present_tuples = true && this.isSetTuples();
      boolean that_present_tuples = true && that.isSetTuples();
      if (this_present_tuples || that_present_tuples) {
        if (!(this_present_tuples && that_present_tuples))
          return false;
        if (!this.tuples.equals(that.tuples))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tellTuples_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tellTuples_args typedOther = (tellTuples_args)other;

      lastComparison = Boolean.valueOf(isSetAccessKey()).compareTo(typedOther.isSetAccessKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, typedOther.accessKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(typedOther.isSetSecretKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecretKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, typedOther.secretKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTuples()).compareTo(typedOther.isSetTuples());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuples()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuples, typedOther.tuples);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tellTuples_args(");
      boolean first = true;

      sb.append("accessKey:");
      if (this.accessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.accessKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secretKey:");
      if (this.secretKey == null) {
        sb.append("null");
      } else {
        sb.append(this.secretKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuples:");
      if (this.tuples == null) {
        sb.append("null");
      } else {
        sb.append(this.tuples);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tellTuples_argsStandardSchemeFactory implements SchemeFactory {
      public tellTuples_argsStandardScheme getScheme() {
        return new tellTuples_argsStandardScheme();
      }
    }

    private static class tellTuples_argsStandardScheme extends StandardScheme<tellTuples_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tellTuples_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessKey = iprot.readString();
                struct.setAccessKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECRET_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.secretKey = iprot.readString();
                struct.setSecretKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TUPLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                  struct.tuples = new ArrayList<Tuple>(_list20.size);
                  for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                  {
                    Tuple _elem22; // required
                    _elem22 = new Tuple();
                    _elem22.read(iprot);
                    struct.tuples.add(_elem22);
                  }
                  iprot.readListEnd();
                }
                struct.setTuplesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tellTuples_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessKey != null) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.accessKey);
          oprot.writeFieldEnd();
        }
        if (struct.secretKey != null) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secretKey);
          oprot.writeFieldEnd();
        }
        if (struct.tuples != null) {
          oprot.writeFieldBegin(TUPLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tuples.size()));
            for (Tuple _iter23 : struct.tuples)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tellTuples_argsTupleSchemeFactory implements SchemeFactory {
      public tellTuples_argsTupleScheme getScheme() {
        return new tellTuples_argsTupleScheme();
      }
    }

    private static class tellTuples_argsTupleScheme extends TupleScheme<tellTuples_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tellTuples_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessKey()) {
          optionals.set(0);
        }
        if (struct.isSetSecretKey()) {
          optionals.set(1);
        }
        if (struct.isSetTuples()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessKey()) {
          oprot.writeString(struct.accessKey);
        }
        if (struct.isSetSecretKey()) {
          oprot.writeString(struct.secretKey);
        }
        if (struct.isSetTuples()) {
          {
            oprot.writeI32(struct.tuples.size());
            for (Tuple _iter24 : struct.tuples)
            {
              _iter24.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tellTuples_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessKey = iprot.readString();
          struct.setAccessKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secretKey = iprot.readString();
          struct.setSecretKeyIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.tuples = new ArrayList<Tuple>(_list25.size);
            for (int _i26 = 0; _i26 < _list25.size; ++_i26)
            {
              Tuple _elem27; // required
              _elem27 = new Tuple();
              _elem27.read(iprot);
              struct.tuples.add(_elem27);
            }
          }
          struct.setTuplesIsSet(true);
        }
      }
    }

  }

}
